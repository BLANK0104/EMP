-- Create Type for Event Status
CREATE TYPE new_event_status AS ENUM (
    'Pending',
    'Rejected',
    'Approved',
    'Modified',
    'Draft'
);

-- Create Clubs Table
CREATE TABLE clubs (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    logo TEXT,
    faculty_incharge JSONB NOT NULL,
    slogan VARCHAR(255),
    featured_event JSONB NOT NULL,
    objectives TEXT[],
    team_members JSONB
);

-- Create Event Details Table
CREATE TABLE event_details (
    id SERIAL PRIMARY KEY,
    event_id INTEGER REFERENCES events(id) ON DELETE CASCADE,
    event_dates JSONB NOT NULL,
    school_audience JSONB NOT NULL,
    audience INTEGER NOT NULL,
    clubs TEXT[],
    resources TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    eventtype VARCHAR[] DEFAULT '{}'::VARCHAR[],
    objectives VARCHAR[] DEFAULT '{}'::VARCHAR[],
    title TEXT,
    description TEXT,
    guests JSONB,
    otherclub VARCHAR,
    otherevent VARCHAR
);

-- Create Event Approvals Table
CREATE TABLE eventapprovals (
    id SERIAL PRIMARY KEY,
    event_id INTEGER NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    approver_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    status new_event_status DEFAULT 'Pending',
    reason TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Events Table
CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    created_by INTEGER NOT NULL REFERENCES users(id),
    status new_event_status DEFAULT 'Pending',
    current_approver INTEGER REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Notification Table
CREATE TABLE notification (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id),
    event_id INTEGER NOT NULL REFERENCES events(id),
    notification_type VARCHAR(50),
    message TEXT NOT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Report Table
CREATE TABLE report (
    id SERIAL PRIMARY KEY,
    event_id INTEGER NOT NULL REFERENCES events(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    title VARCHAR(255),
    event_type VARCHAR(100),
    guest_speakers JSONB,
    start_date DATE,
    start_time TIME,
    end_date DATE,
    end_time TIME,
    objectives TEXT[],
    venue VARCHAR(255),
    resources TEXT,
    audience INTEGER,
    description TEXT,
    photos TEXT[],
    faculty_coordinators JSONB,
    student_coordinators JSONB,
    schools TEXT[],
    branches TEXT[],
    classes TEXT[],
    years TEXT[],
    clubs TEXT
);

-- Create Users Table
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(128) NOT NULL,
    role VARCHAR(20) NOT NULL
);

-- Create request_assign Table
CREATE TABLE request_assign (
   created_by INTEGER UNIQUE REFERENCES users(id),
   approver INTEGER REFERENCES users(id),
   PRIMARY KEY (created_by, approver)
);

