-- Active: 1727179020532@@127.0.0.1@5432@ems@public

--USERS:

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(128) NOT NULL,
    role VARCHAR(20) NOT NULL
);



--EVENTS: 

CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    created_by INT NOT NULL,
    status VARCHAR(10) NOT NULL CHECK (Status IN ('Approved', 'Pending', 'Rejected', 'Modified')),
    current_approver INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



--EVENT APPROVAL:

CREATE TABLE eventapprovals (
    id SERIAL PRIMARY KEY,
    event_id INT NOT NULL,
    created_by INT NOT NULL,
    status VARCHAR(10) NOT NULL CHECK (Status IN ('Approved', 'Pending', 'Rejected', 'Modified')),
    current_approver INT NOT NULL,
    reason TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE
);



--Notification: 

CREATE TABLE notification (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    event_id INT NOT NULL,
    notification_type VARCHAR(20) NOT NULL CHECK (notification_type IN ('Approval_required', 'Reminder')),
    message TEXT NOT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE
);

--REPORT :

CREATE TABLE report (
  id SERIAL PRIMARY KEY,
  event_id INT NOT NULL,  -- Foreign key linking to the events table
  title VARCHAR(255),
  event_type VARCHAR(100),
  guest_speakers JSONB,  -- Stores guest speakers as JSON
  start_date DATE,
  start_time TIME,
  end_date DATE,
  end_time TIME,
  objectives TEXT[],  -- Array to store multiple objectives
  venue VARCHAR(255),
  resources TEXT,
  audience INT,
  description TEXT,
  photos TEXT[],  -- Assuming you are storing paths or URLs for photos
  faculty_coordinators JSONB,  -- Stores faculty coordinators as JSON
  student_coordinators JSONB,  -- Stores student coordinators as JSON
  schools TEXT[],  -- Array to store multiple schools
  branches TEXT[],  -- Array to store multiple branches
  classes TEXT[],  -- Array to store multiple classes
  years TEXT[],  -- Array to store years (e.g. 1st Year)
  clubs TEXT,
  
  CONSTRAINT fk_event
      FOREIGN KEY (event_id) 
      REFERENCES events(id)  -- References the id column in the events table
      ON DELETE CASCADE      -- Optionally: Delete the report if the event is deleted
);


CREATE TABLE event_details (
    id SERIAL PRIMARY KEY,
    event_id INTEGER NOT NULL,
    event_dates JSONB NOT NULL,
    school_audience JSONB NOT NULL,
    audience INTEGER NOT NULL,
    clubs TEXT[] NOT NULL,
    resources TEXT,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    eventtype TEXT[] NOT NULL,
    objectives TEXT[] NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    guests JSONB,
    registration TEXT
);

